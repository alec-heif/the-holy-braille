package com.alec.heif.braille;

/** 
 * Note this cannot be run from within the Android project
 * but was useful for quickly iterating on various BitDotMapper
 * implementations in a separate java project.
 */
public class Main {


	public static void main(String[] args) {
		
		int[][] correct = new int[][] {
				{0,0,1,1,1,0,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,1,1},
				{0,0,0,1,0,1,0,0,0,0,1,1,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,1,0},
				{0,1,1,1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,1,1,0,0,1,1,0,0},
				{0,0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,1,0,1,1,0},
				{0,0,0,1,0,1,1,1,1,0,1,0,0,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0},
				{0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0},
				
				{1,0,0,0,1,1,1,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1},
				{1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1},
				{1,0,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1},
				{1,1,0,0,1,0,1,0,0,1,0,1,1,0,1,0,0,0,0,1,1,0,1,0,1,1,0,0,0,1},
				{1,0,0,0,1,0,0,1,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,1,0,0,1,1},
				{0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1},	
				
				{1,0,1,0,0,1,1,0,0,0,1,1,1,0,1,0,1,1,0,1,1,1,1,1,0,0,0,1,0,1},
				{1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0},
				{0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0},
				{1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,1,0,0,1,1,0,1,0,1,1,0,1,0,0},
				{1,0,1,0,0,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,0,0},
				{1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0},
				
				{0,1,1,0,1,0,1,1,1,1,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1},
				{1,0,0,1,0,0,0,1,0,1,1,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1,0,1,0,1},
				{1,0,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,1,0},
				{0,0,0,1,1,1,0,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,1,1,0,1,0,0,1},
				{0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,1,1,1,0,0,1,1},
				{0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0},
				
				{0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,0,0,1,1,0,1,0,0,0,0,1,1,0,1,1},
				{0,0,1,0,1,0,0,0,0,1,0,1,1,1,0,0,1,1,1,1,0,1,0,0,1,0,0,0,0,0},
				{0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0},
				{1,0,0,0,1,0,0,1,0,0,0,1,1,0,0,1,0,1,0,0,0,0,1,1,0,0,1,0,0,0},
				{0,1,0,0,0,0,1,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1},
				{0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,1}
		};

		int[][] a = BitDotMapper.test1();
		int[][] b = BitDotMapper.test2();
		int[][] c = BitDotMapper.test3();

		int[][] d = new int[a.length+b.length+c.length][];
		for (int i = 0; i < a.length; i++) {
			d[i] = a[i];
		}
		for (int i = 0; i < b.length; i++) {
			d[a.length + i] = b[i];
		}
		for (int i = 0; i < c.length; i++) {
			d[a.length + b.length + i] = c[i];
		}

		System.out.println("Num of d rows: " + d.length);
		System.out.println("Num of d cols: " + d[0].length);
		
		BitDotMapper bitDotMapper = new BitDotMapper(d);
		bitDotMapper.setOffsets();
		System.out.println(bitDotMapper.DOT_HEIGHT);
		System.out.println(bitDotMapper.DOT_WIDTH);
		int[][] brailleDots = bitDotMapper.parse();
		System.out.println(BrailleUtils.parseBraille(brailleDots));
		for (int i = 0; i < brailleDots.length; i++) {
			for (int j = 0; j < brailleDots[0].length; j++) {
				if (correct[i][j] != brailleDots[i][j]) {
					//System.out.println("Check (" + i + "," + j + ")");
				}
			}
		}


	}

}
